name: build
on:
  push:
  pull_request:

jobs:
  build_macos:
    name: "Build: MacOS"
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v2
      - run: echo "MADX_VERSION=$(cat MADX_VERSION)" >> $GITHUB_ENV

      - name: Download cached MAD-X build
        id: madx-build-cache
        # Do NOT use cache@v2, it can't handle relative paths with '..' nor
        # absolute paths on windows!
        uses: actions/cache@v1
        with:
          path: ../MAD-X/dist
          key: "\
            madx-${{ env.MADX_VERSION }}-\
            macos-\
            patches-${{ hashFiles('.github/patch/*') }}-\
            scripts-${{ hashFiles('.github/build/macos/madx*') }}\
          "

      - name: Prepare MAD-X source
        if: steps.madx-build-cache.outputs.cache-hit != 'true'
        uses: ./.github/checkout-madx
        with:
          madx_version: ${{ env.MADX_VERSION }}

      - name: Build MAD-X
        if: steps.madx-build-cache.outputs.cache-hit != 'true'
        run: |
          cd ../MAD-X
          ../cpymad/.github/build/macos/madx.sh

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: '3.8'

      - name: Build cpymad wheels
        # We need 'bash -l' to make conda available within the script:
        run: bash -l .github/build/macos/cpymad.sh ../MAD-X/dist

      - name: Fixup wheel dependencies
        run: |
          pip3 install delocate
          delocate-wheel dist/*.whl
          delocate-listdeps --all dist/*.whl

      - name: Upload cpymad wheels
        uses: actions/upload-artifact@v2
        with:
          name: dist-macos
          path: dist

  test:
    name: Tests
    runs-on: ${{ matrix.os == 'linux' && 'ubuntu' || matrix.os }}-latest
    needs: [build_macos]
    strategy:
      matrix:
        # 32bit python is currently only available on windows in
        # actions/setup-python:
        os: [linux, windows, macos]
        python: ['3.5', '3.6', '3.7', '3.8', '3.9', '3.10']

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Download cpymad wheels
        uses: actions/download-artifact@v2
        with:
          name: dist-${{ matrix.os }}
          path: dist

      - name: Install cpymad from wheel
        run: |
          set -ex
          python -m pip install -U pip || sudo python -m pip install -U pip
          pip install cpymad -f dist --no-index --no-deps
          pip install cpymad

      - run: pip install flake8 twine coverage coveralls pytest
      - run: twine check dist/*
      - run: flake8

      - run: coverage run --source=cpymad -p -m pytest -v -k "not dframe"
      - run: pip install pandas
      - run: coverage run --source=cpymad -p -m pytest -v -k "dframe"

      - run: coverage combine
      - run: coveralls
        if: env.COVERALLS_REPO_TOKEN != ''
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
