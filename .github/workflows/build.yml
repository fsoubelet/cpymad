name: build
on:
  push:
  pull_request:
  schedule:
    - cron: '45 14  *  *  1'

jobs:
  build_linux:
    name: "Build: Linux (x64)"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        base:
          - manylinux1_x86_64
          - manylinux2014_x86_64
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/build/linux
        with:
          base: ${{ matrix.base }}

  build_linux_arm:
    name: "Build: Linux (ARM)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/build/linux
        with:
          base: manylinux2014_aarch64

  build_windows:
    name: "Build: Windows"
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v3
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          path-type: inherit
          install: mingw-w64-ucrt-x86_64-gcc
                   mingw-w64-ucrt-x86_64-gcc-fortran
                   mingw-w64-ucrt-x86_64-cmake

      - run: echo "MSYSTEM=UCRT64" >> $GITHUB_ENV
      - run: echo "MADX_VERSION=$(cat MADX_VERSION)" >> $GITHUB_ENV

      - name: Download cached MAD-X build
        id: madx-build-cache
        uses: actions/cache@v3
        with:
          path: src/MAD-X/dist
          key: "\
            madx-${{ env.MADX_VERSION }}-\
            windows-\
            patches-${{ hashFiles('.github/patch/*') }}-\
            scripts-${{ hashFiles('.github/build/windows/madx*') }}\
          "

      - name: Prepare MAD-X source
        if: steps.madx-build-cache.outputs.cache-hit != 'true'
        uses: ./.github/checkout-madx
        with:
          madx_version: ${{ env.MADX_VERSION }}

      - name: Build MAD-X
        if: steps.madx-build-cache.outputs.cache-hit != 'true'
        run: .github/build/windows/madx.sh src/MAD-X

      - uses: actions/setup-python@v4
        with: {python-version: "3.6"}
      - run: .github/build/windows/cpymad.sh src/MAD-X/dist 3.6

      - uses: actions/setup-python@v4
        with: {python-version: "3.7"}
      - run: .github/build/windows/cpymad.sh src/MAD-X/dist 3.7

      - uses: actions/setup-python@v4
        with: {python-version: "3.8"}
      - run: .github/build/windows/cpymad.sh src/MAD-X/dist 3.8

      - uses: actions/setup-python@v4
        with: {python-version: "3.9"}
      - run: .github/build/windows/cpymad.sh src/MAD-X/dist 3.9

      - uses: actions/setup-python@v4
        with: {python-version: "3.10"}
      - run: .github/build/windows/cpymad.sh src/MAD-X/dist 3.10

      - uses: actions/setup-python@v4
        with: {python-version: "3.11"}
      - run: .github/build/windows/cpymad.sh src/MAD-X/dist 3.11

      - name: Upload cpymad wheels
        uses: actions/upload-artifact@v3
        with:
          name: dist-windows
          path: dist

  build_macos:
    name: "Build: MacOS"
    runs-on: macos-11
    strategy:
      matrix:
        arch:
          - x86_64
          - arm64
    steps:
      - uses: actions/checkout@v3
      - run: echo "MADX_VERSION=$(cat MADX_VERSION)" >> $GITHUB_ENV

      - name: Download cached MAD-X build
        id: madx-build-cache
        uses: actions/cache@v3
        with:
          path: src/MAD-X/dist
          key: "\
            madx-${{ env.MADX_VERSION }}-\
            macos-${{ matrix.arch }}-\
            patches-${{ hashFiles('.github/patch/*') }}-\
            scripts-${{ hashFiles('.github/build/macos/madx*') }}\
          "

      - name: Prepare MAD-X source
        if: steps.madx-build-cache.outputs.cache-hit != 'true'
        uses: ./.github/checkout-madx
        with:
          madx_version: ${{ env.MADX_VERSION }}

      # Select matching Xcode and SDK, see: https://xcodereleases.com/
      - run: |
          sudo xcode-select -switch /Applications/Xcode_12.5.1.app
          echo "SDKROOT=$(xcrun --show-sdk-path)" >> $GITHUB_ENV

      - name: Setup gfortran
        run: |
          set -xeo pipefail

          if [[ ${{ matrix.arch }} == "x86_64" ]]; then
            FC=gfortran-11
            LIBDIR=$(dirname $(find /usr/local/Cellar/gcc@11 -name libgfortran.dylib))
            echo "MACOSX_DEPLOYMENT_TARGET=10.14" >> $GITHUB_ENV

          elif [[ ${{ matrix.arch }} == "arm64" ]]; then
            # See: https://github.com/MacPython/gfortran-install
            name=gfortran-darwin-arm64-cross
            curl -L -O https://github.com/isuruf/gcc/releases/download/gcc-11.3.0-2/${name}.tar.gz
            sudo tar -f ${name}.tar.gz -C /opt -xzv
            rm ${name}.tar.gz

            FC=$(find /opt/${name}/bin -name "*-gfortran")
            LIBDIR=$(dirname $(find /opt/${name}/lib -name libgfortran.dylib))

            # See: https://github.com/pypa/cibuildwheel/discussions/997
            echo "ARCHFLAGS=-arch arm64" >> $GITHUB_ENV
            echo "_PYTHON_HOST_PLATFORM=macosx-11.0-arm64" >> $GITHUB_ENV
            echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
          fi

          LDFLAGS="-L$LIBDIR -Wl,-rpath,$LIBDIR"

          echo "FC=$FC"           >> $GITHUB_ENV  # for cmake
          echo "LDFLAGS=$LDFLAGS" >> $GITHUB_ENV  # for setuptools
          echo "LIBDIR=$LIBDIR"   >> $GITHUB_ENV  # for delocate step

      - name: Build MAD-X
        if: steps.madx-build-cache.outputs.cache-hit != 'true'
        run: .github/build/macos/madx.sh src/MAD-X ${{ matrix.arch }}

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: '3.8'

      # We need 'bash -l' to make conda available within the script:
      - run: bash -l .github/build/macos/cpymad.sh src/MAD-X/dist 3.7
      - run: bash -l .github/build/macos/cpymad.sh src/MAD-X/dist 3.8
      - run: bash -l .github/build/macos/cpymad.sh src/MAD-X/dist 3.9
      - run: bash -l .github/build/macos/cpymad.sh src/MAD-X/dist 3.10
      - run: bash -l .github/build/macos/cpymad.sh src/MAD-X/dist 3.11

      - name: Fixup wheel dependencies
        run: |
          pip3 install delocate
          DYLD_LIBRARY_PATH=$LIBDIR delocate-wheel dist/*.whl
          DYLD_LIBRARY_PATH=$LIBDIR delocate-listdeps --all dist/*.whl

      - name: Upload cpymad wheels
        uses: actions/upload-artifact@v3
        with:
          name: dist-macos
          path: dist

  test_linux:
    name: "Tests: Linux"
    runs-on: ubuntu-latest
    needs: build_linux
    strategy:
      matrix:
        python:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/test
        with:
          os: linux
          python: ${{ matrix.python }}
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

  test_windows:
    name: "Tests: Windows"
    runs-on: windows-latest
    needs: build_windows
    strategy:
      matrix:
        python:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/test
        with:
          os: windows
          python: ${{ matrix.python }}
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

  test_macos:
    name: "Tests: MacOS"
    runs-on: macos-latest
    needs: build_macos
    strategy:
      matrix:
        python:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/test
        with:
          os: macos
          python: ${{ matrix.python }}
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

  documentation:
    name: Update documentation
    needs: build_linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - uses: actions/download-artifact@v3
        with:
          name: dist-linux
          path: dist

      - run: sudo apt-get install -qy graphviz
      - run: pip install -U pip
      - run: pip install cpymad[doc] -f dist
      - run: make -C doc html

      - name: Deploy to GitHub Pages
        if: success() && (
            startsWith(github.ref, 'refs/tags/v') ||
            github.ref == 'refs/heads/master')
        uses: crazy-max/ghaction-github-pages@v2
        with:
          build_dir: doc/_build/html
          commit_message: Build documentation from ${{ github.ref }}@${{ github.sha }}
          jekyll: false
        env:
          GITHUB_TOKEN: ${{ github.token }}

  upload_release:
    name: Upload release
    needs: [build_linux_arm, test_linux, test_windows, test_macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Fetch built distributions
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Merge artifacts to single folder
        run: |
          mv dist/dist-*/*.whl dist/
          mv dist/dist-linux/*.tar.gz dist/

      - name: Install twine
        run: pip install twine

      - name: Publish PyPI package
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: twine upload dist/*.whl dist/*.tar.gz

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
